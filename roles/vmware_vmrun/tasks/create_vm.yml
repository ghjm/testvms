---
- name: Ensure VM directory exists
  file:
    path: "{{ vm_path }}"
    state: directory
  delegate_to: localhost

- name: Check if kickstart ISO file already exists
  stat:
    path: "{{ vm_path }}/{{ kickstart_iso_filename }}"
  register: kickstart_iso_file
  delegate_to: localhost

- name: Create kickstart ISO file
  include: make_kickstart_iso.yml
  when: not kickstart_iso_file.stat.exists and unattend_method == "el-ks"

- name: Create preseed ISO file
  include: make_preseed_iso.yml
  when: not kickstart_iso_file.stat.exists and unattend_method == "ubuntu"

- name: Create unattend ISO file
  include: make_unattend_iso.yml
  when: not kickstart_iso_file.stat.exists and unattend_method == "windows"

- name: Check if VMX file already exists
  stat:
    path: "{{ vm_path }}/{{ vmx_filename }}"
  register: vmx_file
  delegate_to: localhost

- name: Create VMX file
  template:
    src: "{{ vmx_template }}"
    dest: "{{ vm_path }}/{{ vmx_filename }}"
  when: not vmx_file.stat.exists
  delegate_to: localhost

- name: Create VMDK file
  command: "\"{{ vmware_library_path }}/vmware-vdiskmanager\" -c -s {{ disk_size }} -t 0 \"{{ vmdk_filename }}\""
  args:
    chdir: "{{ vm_path }}"
  when: vmx_file.stat.exists == False
  delegate_to: localhost

- name: Boot the VM and wait for setup
  include: startup_vm.yml

- name: Check if CD-ROM devices present
  command: 'grep "^sata" "{{ vm_path }}/{{ vmx_filename }}"'
  register: vmx_sata_devs
  always_run: True
  ignore_errors: True
  changed_when: False
  delegate_to: localhost

- name: Shut down the VM
  include: shutdown_vm.yml
  when: vmx_sata_devs.rc == 0

- name: Remove CD/DVD devices
  lineinfile:
    dest: "{{ vm_path }}/{{ vmx_filename }}"
    regexp: "^sata0"
    state: absent
  notify:
    - reset
  delegate_to: localhost
  when: vmx_sata_devs.rc == 0

- name: Boot the VM again
  include: startup_vm.yml
  when: vmx_sata_devs.rc == 0

- name: Gather facts 
  setup:
